import express from 'express';
import axios from 'axios';
import cors from 'cors';

const app = express();
app.use(cors());
app.use(express.json());

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const systemPrompt = `–¢–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –º–µ–¥–∏—á–Ω–æ—ó –∫–ª—ñ–Ω—ñ–∫–∏, —è–∫–∏–π —á–∏–Ω–∏—Ç—å —Ä—ñ–∑–Ω—ñ –≤–∏–¥–∏ –æ–ø–æ—Ä—É –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–Ω—è–º –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞. –¢–≤–æ—è –º–µ—Ç–∞ ‚Äî —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞ –±—ñ–∑–Ω–µ—Å—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –∑ –ø–æ–∑–∏—Ü—ñ—ó "–ø—Ä–æ—Ö–∞—á–∞" –≤ –ø–æ–∑–∏—Ü—ñ—é "–∫–µ—Ä—ñ–≤–Ω–∏–∫–∞" —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –æ–ø–æ—Ä—É.

–¢–∏–ø–∏ —Ä–æ–ª–µ–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (—Ä–∞–Ω–¥–æ–º–Ω–æ):
- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: –ø–∞—Ü—ñ—î–Ω—Ç–∏, –¥–∑–≤—ñ–Ω–∫–∏, –∑–∞–ø–∏—Å
- –õ—ñ–∫–∞—Ä-—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç: –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –≥–æ—Ä–¥—ñ—Å—Ç—å
- –ì–æ–ª–æ–≤–Ω–∞ –º–µ–¥—Å–µ—Å—Ç—Ä–∞: "—Ç–∞–∫ –∑–∞–≤–∂–¥–∏ —Ä–æ–±–∏–ª–∏"
- –ë—É—Ö–≥–∞–ª—Ç–µ—Ä: —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—ñ, —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è

–°—Ü–µ–Ω–∞—Ä—ñ—ó –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω—å (—Ä–∞–Ω–¥–æ–º–Ω–æ):
- –ó–∞–ø–∏—Å –¥–∑–≤—ñ–Ω–∫—ñ–≤
- KPI —ñ –ø—Ä–µ–º—ñ—é–≤–∞–Ω–Ω—è
- –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
- –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤
- –°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ

–¢–∏–ø–∏ –æ–ø–æ—Ä—É:
- –ü—Ä—è–º–∏–π: "–¶–µ –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏"
- –¢–µ—Ö–Ω—ñ—á–Ω–∏–π: "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î"
- –ï–º–æ—Ü—ñ–π–Ω–∏–π: "–í–∏ –Ω–µ –¥–æ–≤—ñ—Ä—è—î—Ç–µ –º–µ–Ω—ñ?"
- –°–∞–±–æ—Ç–∞–∂: "–°–ø—Ä–æ–±—É—é..." (—ñ –Ω—ñ—á–æ–≥–æ)

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
–û–°–ù–û–í–ù–ê –í–Ü–î–ü–û–í–Ü–î–¨: [—Ä–µ–∞–∫—Ü—ñ—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞]
–ê–ù–ê–õ–Ü–ó (–ø–æ–∫–∞–∑—É–π –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫):
‚ùå –ü–û–ú–ò–õ–ö–ê: [—â–æ –∑—Ä–æ–±–∏–≤ –∫–µ—Ä—ñ–≤–Ω–∏–∫ –Ω–µ —Ç–∞–∫]
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: [—è–∫ —Ç—Ä–µ–±–∞ –±—É–ª–æ]
üí° –ü–Ü–î–ö–ê–ó–ö–ê: [–ø–æ—Ä–∞–¥–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫—É]

–ú–µ—Ç–∞: —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏, –∞ –Ω–µ —Å–∞–±–æ—Ç—É–≤–∞—Ç–∏. –ó–¥–∞–≤–∞–π—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å–∏–ª—å–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞.`;

app.post('/api/chat', async (req, res) => {
  const userMessage = req.body.message;
  const history = req.body.history || [];

  const messages = [
    { role: 'system', content: systemPrompt },
    ...history
  ];

  if (userMessage) {
    messages.push({ role: 'user', content: userMessage });
  }

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages,
        temperature: 0.7
      },
      {
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const reply = response.data.choices[0].message.content;
    res.json({ reply });
  } catch (err) {
    console.error(err.response?.data || err.message);
    res.status(500).send('GPT error');
  }
});

app.listen(3000, () => console.log('GPT —Ç—Ä–µ–Ω–∞–∂–µ—Ä –∑ –æ–ø–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000'));